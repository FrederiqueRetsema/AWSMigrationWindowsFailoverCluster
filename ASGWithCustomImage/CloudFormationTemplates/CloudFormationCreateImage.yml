AWSTemplateFormatVersion: "2010-09-09"
Description: ASG with 1 Windows node

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      -
        Label: 
          default: "EC2"
        Parameters: 
          - InstanceType
          - KeyName
          - AMI
          - SecurityGroup
          - SubnetAZa
      -
        Label:
          default: "Arns"
        Parameters:
          - CreateImageFunctionArn
          - PutParameterFunctionArn
Parameters:
  InstanceType:
     Description: 'Amazon EC2 instance type'
     Type: 'String'
     Default: 't3.medium' 
     AllowedValues: 
       - 't3.medium'
       - 'm5a.xlarge'
  KeyName:
     Description: 'Name of an existing EC2 KeyPair'
     Type: 'String'
  AMI:
    Description: 'AMI to use'
    Type: 'String'
  SecurityGroup:
    Description: 'SecurityGroup to use'
    Type: 'String'
  SubnetAZa:
    Description: 'Subnet of AZa'
    Type: 'String'
  CreateImageFunctionArn:
    Description: 'ARN of the Lambda function to create an image from a disk'
    Type: 'String'
  PutParameterFunctionArn:
    Description: 'ARN of the Lambda function to put a parameter in the parameter store'
    Type: 'String'
  
Mappings:
  AWSManagedRoles:
    SSM:
      AmazonSSMManagedInstanceCore: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

Resources: 

  # The CloudFormation AWS::SSM::Parameter doesn't allow overwrite. We need this parameter in both CloudFormationCreateImage and CloudFormationASGAndLaunchTemplate
  # It has the same name and different values. The parameter is used in CreateWebsite.
  ExecutePutParameterFunction:
    Type: Custom::ExecutePutParameterFunction
    Properties:
      ServiceToken: !Ref PutParameterFunctionArn
      ParameterName: "/asgnode/stackname"
      ParameterType: "String"
      ParameterValue: !Sub ${AWS::StackName}
      ParameterDescription: "Stackname (for signalling completion)"

  ParameterStackName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/asgnode/stackname"
      Type: String
      Value: !Sub ${AWS::StackName}

  EC2BaseInstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !FindInMap [ "AWSManagedRoles", "SSM", "AmazonSSMManagedInstanceCore"]
  EC2BaseInstanceIAMRolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "EC2BaseInstanceIAMRolePolicies"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "ssm:GetParameter"
            Resource: 
              - "arn:aws:ssm:*:*:parameter/demo/failover/password"
              - "arn:aws:ssm:*:*:parameter/asgnode/stackname"
          -
            Effect: "Allow"
            Action: 
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
            Resource: 
              - "*"
      Roles:
        -
          Ref: "EC2BaseInstanceIAMRole"
  EC2BaseInstanceIAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "EC2BaseInstanceIAMRole"

  EC2BaseInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=2
            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2BaseInstance.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -s ${AWS::StackName} -r EC2BaseInstance --region ${AWS::Region}
            'c:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "logfile": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log"
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log",
                            "log_group_name": "amazon-cloudwatch-agent.log",
                            "log_stream_name": "ASGNode",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "C:\\Install\\install_log.txt",
                            "log_group_name": "install_log.txt",
                            "log_stream_name": "ASGNode",
                            "encoding": "utf-16",
                            "timezone": "UTC"
                          }
                        ]
                      }
                    }
                  }
                }
          commands:
            01-AllCommands:
              command: >
                mkdir C:\Install &
                curl https://awscli.amazonaws.com/AWSCLIV2.msi -o AWSCLIv2.MSI & 
                AWSCLIv2.MSI /quiet &
                curl https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi -o amazon-cloudwatch-agent.msi &
                amazon-cloudwatch-agent.msi /quiet &
                curl https://s3.amazonaws.com/amazon-ec2launch-v2/windows/amd64/latest/AmazonEC2Launch.msi -o AmazonEC2Launch.msi &
                AmazonEC2Launch.msi /quiet &
                powershell -Command "& 'C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1' -a fetch-config -m ec2 -s -c file:'C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json'" &
                curl https://raw.githubusercontent.com/FrederiqueRetsema/AWSMigrationWindowsFailoverCluster/master/ASGWithCustomImage/ASGNode/uidspwds.ps1 -o C:\Install\uidspwds.ps1 &
                curl https://raw.githubusercontent.com/FrederiqueRetsema/AWSMigrationWindowsFailoverCluster/master/ASGWithCustomImage/ASGNode/part1.ps1 -o C:\Install\part1.ps1 &
                curl https://raw.githubusercontent.com/FrederiqueRetsema/AWSMigrationWindowsFailoverCluster/master/ASGWithCustomImage/ASGNode/part2.ps1 -o C:\Install\part2.ps1 &
                curl https://raw.githubusercontent.com/FrederiqueRetsema/AWSMigrationWindowsFailoverCluster/master/ASGWithCustomImage/ASGNode/CreateWebpage.ps1 -o C:\Install\CreateWebpage.ps1 &
                Powershell.exe -File c:\install\part1.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: 
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2BaseInstanceIAMInstanceProfile
      SubnetId: !Ref SubnetAZa
      Tags:
        - Key: Name
          Value: ASGNode
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 30
      SecurityGroupIds:
        - !Ref SecurityGroup
      UserData: 
        "Fn::Base64": 
          !Sub |
            <script>

            cfn-init.exe -v -s ${AWS::StackName} -r EC2BaseInstance --region ${AWS::Region}

            echo Write-Log -LogText "TRACE Signal end of configuration (for now)" >> C:\Install\part2.ps1
            echo cfn-signal.exe -e 0 --stack=${AWS::StackName} --resource EC2BaseInstance --region ${AWS::Region} >> C:\\Install\part2.ps1
            echo Write-Log -LogText "TRACE Start sysprep (will stop this instance)" >> C:\Install\part2.ps1
            echo . "C:\Program Files\Amazon\EC2Launch\EC2Launch" sysprep >> C:\Install\part2.ps1 
            echo Write-Log -ComputerName $COMPUTERNAME -LogText "END part2.ps1 (from CloudFormationASGNode.yml)" >> C:\Install\part2.ps1

            echo $StackName  = Get-SSMParameter -Parameter "/asgnode/stackname" >> C:\Install\SignalASG.ps1
            echo cfn-signal.exe -e 0 --stack=$StackName --resource AutoScalingGroup --region ${AWS::Region} >> C:\Install\SignalASG.ps1
            echo $INSTANCEID = (cmd /C "curl http://169.254.169.254/latest/meta-data/instance-id") >> C:\Install\SignalASG.ps1
            echo aws autoscaling complete-lifecycle-action --lifecycle-action-result CONTINUE --lifecycle-hook-name ASGNodeHook --auto-scaling-group-name ASG --instance-id $INSTANCEID --region ${AWS::Region} >> C:\Install\SignalASG.ps1

            shutdown /r
            
            </script>

  ExecuteCreateImage:
    Type: Custom::ExecuteCreateImage
    Properties:
      ServiceToken: !Ref CreateImageFunctionArn
      InstanceId: !Ref EC2BaseInstance

Outputs:
  ImageId:
    Description: "AMI of Custom Image"
    Value: !GetAtt ExecuteCreateImage.ImageId
